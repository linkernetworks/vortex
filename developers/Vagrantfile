# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  unless Vagrant.has_plugin?("vagrant-scp")
    raise 'Plugin vagrant-reload is not installed!'
  end
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = 'vortex-dev'
  config.vm.define vm_name = 'vortex'

  development_env = ENV.fetch('DEV', true)
  dpdk_ovs_env = ENV.fetch('DPDK', true)

$vortex_env = <<SHELL
set -e -x -u
echo "=== Install Vortex Server Environment ==="
sudo mkdir -p "/etc/systemd/system/docker.service.d/"
sudo cp "/tmp/override.conf" "/etc/systemd/system/docker.service.d/override.conf"
sudo apt-get update
sudo apt-get install -y git build-essential nfs-common ntp

# Install Docker
# kubernetes official max validated version: 17.03.2~ce-0~ubuntu-xenial
export DOCKER_VERSION="17.06.2~ce-0~ubuntu"
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce=${DOCKER_VERSION}
# Manage Docker as a non-root user
sudo usermod -aG docker $USER

# Install Kubernetes
export KUBE_VERSION="1.11.0"
export NET_IF_NAME="enp0s8"
sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee --append /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl kubelet=${KUBE_VERSION}-00 kubeadm=${KUBE_VERSION}-00

# Disable swap
sudo swapoff -a && sudo sysctl -w vm.swappiness=0
sudo sed '/swap.img/d' -i /etc/fstab

sudo kubeadm init --kubernetes-version v${KUBE_VERSION} --apiserver-advertise-address=172.17.8.100 --pod-network-cidr=10.244.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Should give flannel the real network interface name
wget --quiet https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml -O /tmp/kube-flannel.yml
sed -i -- 's/"--kube-subnet-mgr"/"--kube-subnet-mgr", "--iface='"$NET_IF_NAME"'"/g' /tmp/kube-flannel.yml
kubectl apply -f /tmp/kube-flannel.yml

kubectl taint nodes --all node-role.kubernetes.io/master-

# Install helm
curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz > helm-v2.9.1-linux-amd64.tar.gz && tar -zxvf helm-v2.9.1-linux-amd64.tar.gz && chmod +x linux-amd64/helm && sudo mv linux-amd64/helm /usr/local/bin/helm

# clone the project
git clone https://github.com/linkernetworks/vortex.git
SHELL

# Install development toolkit
$vortex_dev_toolkits = <<SHELL
set -e -x -u
echo "=== Install Development Toolkit ==="
sudo apt-get install -y vim cmake tcpdump unzip tig
# Install Golang
wget --quiet https://storage.googleapis.com/golang/go1.10.2.linux-amd64.tar.gz
sudo tar -zxf go1.10.2.linux-amd64.tar.gz -C /usr/local/
echo 'export GOROOT=/usr/local/go' >>  /home/$USER/.bashrc
echo 'export GOPATH=$HOME/go' >> /home/$USER/.bashrc
echo 'export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin' >> /home/$USER/.bashrc
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin
# setup golang dir
mkdir -p /home/$USER/go/src
rm -rf /home/$USER/go1.10.2.linux-amd64.tar.gz

# Install protoc
# Env for proto
PROTOC_RELEASE="https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip"
PROTOC_TARGET="${HOME}/protoc"
if [ ! -d "${PROTOC_TARGET}" ]; then curl -fsSL "$PROTOC_RELEASE" > "${PROTOC_TARGET}.zip"; fi
if [ -f "${PROTOC_TARGET}.zip" ]; then unzip "${PROTOC_TARGET}.zip" -d "${PROTOC_TARGET}"; fi
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}

# Install vim environment
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim +PluginInstall +qall

# init YouCompleteMe vim plugin
sudo apt-get install -y python-dev python3-dev
cd ~/.vim/bundle/YouCompleteMe
./install.py --go-completer

# Install govendor package manager
go get -u github.com/kardianos/govendor
SHELL

$apt_openvswitch = <<SHELL
set -e -x -u
sudo apt-get update && sudo apt-get install -y openvswitch-switch
SHELL

# Open vSwitch 	DPDK
# 2.6.x         16.07.2
# 2.7.x         16.11.6
# 2.8.x         17.05.2
# 2.9.x         17.11.2

$ovs_dpdk = <<SHELL
set -e -x -u
echo "=== Install OVS/DPDK ==="
# Configure hugepages
# You can later check if this change was successful with `cat /proc/meminfo`
# Hugepages setup should be done as early as possible after boot
echo 'vm.nr_hugepages=1024' | sudo tee /etc/sysctl.d/hugepages.conf
sudo mount -t hugetlbfs none /dev/hugepages
sudo sysctl -w vm.nr_hugepages=1024

sudo cp /tmp/ovs-vswitchd.service /etc/systemd/system/ovs-vswitchd.service
sudo cp /tmp/ovsdb-server.service /etc/systemd/system/ovsdb-server.service

# Name of network interface provisioned for DPDK to bind
export NET_IF_NAME=enp0s18
sudo apt-get -qq update
sudo apt-get -y -qq install clang doxygen hugepages build-essential libnuma-dev libpcap-dev inux-headers-`uname -r` dh-autoreconf libssl-dev libcap-ng-dev openssl python python-pip htop
sudo pip install six

#### Download DPDK, Open vSwitch and pktgen source
wget --quiet https://fast.dpdk.org/rel/dpdk-17.11.2.tar.xz
sudo tar xf dpdk-17.11.2.tar.xz -C /usr/src/
wget --quiet http://openvswitch.org/releases/openvswitch-2.9.2.tar.gz
sudo tar -zxf openvswitch-2.9.2.tar.gz -C /usr/src/
wget --quiet http://www.dpdk.org/browse/apps/pktgen-dpdk/snapshot/pktgen-3.4.9.tar.gz
sudo tar -zxf pktgen-3.4.9.tar.gz -C /usr/src/

#### Install DPDK
echo 'export DPDK_DIR=/usr/src/dpdk-stable-17.11.2' | sudo tee -a /root/.bashrc
echo 'export LD_LIBRARY_PATH=$DPDK_DIR/x86_64-native-linuxapp-gcc/lib' | sudo tee -a /root/.bashrc
echo 'export DPDK_TARGET=x86_64-native-linuxapp-gcc' | sudo tee -a /root/.bashrc
echo 'export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET' | sudo tee -a /root/.bashrc
export DPDK_DIR=/usr/src/dpdk-stable-17.11.2
export LD_LIBRARY_PATH=$DPDK_DIR/x86_64-native-linuxapp-gcc/lib
export DPDK_TARGET=x86_64-native-linuxapp-gcc
export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET
cd $DPDK_DIR

# Build and install the DPDK library
sudo make install T=$DPDK_TARGET DESTDIR=install

# (Optional) Export the DPDK shared library location
sudo sed -i 's/CONFIG_RTE_BUILD_SHARED_LIB=n/CONFIG_RTE_BUILD_SHARED_LIB=y/g' ${DPDK_DIR}/config/common_base

# Install kernel modules
sudo modprobe uio
sudo insmod ${DPDK_DIR}/x86_64-native-linuxapp-gcc/kmod/igb_uio.ko

# Make uio and igb_uio installations persist across reboots
sudo ln -sf ${DPDK_DIR}/x86_64-native-linuxapp-gcc/kmod/igb_uio.ko /lib/modules/`uname -r`
sudo depmod -a
echo "uio" | sudo tee -a /etc/modules
echo "igb_uio" | sudo tee -a /etc/modules

# Bind secondary network adapter
# Note that this NIC setup does not persist across reboots
sudo ifconfig ${NET_IF_NAME} down
sudo ${DPDK_DIR}/usertools/dpdk-devbind.py --bind=igb_uio ${NET_IF_NAME}
sudo ${DPDK_DIR}/usertools/dpdk-devbind.py --status

#### Install Open vSwitch with DPDK
export OVS_DIR=/usr/src/openvswitch-2.9.2
cd $OVS_DIR
./boot.sh
CFLAGS='-march=native' ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc --with-dpdk=$DPDK_BUILD
make && sudo make install
sudo mkdir -p /usr/local/etc/openvswitch
sudo mkdir -p /usr/local/var/run/openvswitch
sudo mkdir -p /usr/local/var/log/openvswitch
sudo ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema
echo 'export PATH=$PATH:/usr/local/share/openvswitch/scripts' | sudo tee -a /root/.bashrc
sudo systemctl enable ovsdb-server
sudo systemctl start ovsdb-server
sudo systemctl enable ovs-vswitchd
sudo systemctl start ovs-vswitchd

### openvswitch with dpdk initial
sudo ovs-vsctl --no-wait init
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem="1024"
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask=0x2
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:max-idle=30000

#### Cleanup
rm -rf /home/vagrant/openvswitch-2.9.2.tar.gz /home/vagrant/dpdk-17.11.2.tar.xz /home/vagrant/pktgen-3.4.9.tar.gz
SHELL

  # In order to simulate multiple interfaces
  # enp0s8
  config.vm.network :private_network, ip: "172.17.8.100"
  # enp0s9
  config.vm.network :private_network, ip: "172.17.8.50"
  # enp0s10
  config.vm.network :private_network, ip: "172.17.8.60"
  # enp0s16
  config.vm.network :private_network, ip: "172.17.8.70"
  # enp0s17
  config.vm.network :private_network, ip: "172.17.8.80"
  # enp0s18
  config.vm.network :private_network, ip: "172.17.8.90"

  config.vm.provision "file", source: "configs/docker.conf", destination: "/tmp/override.conf"

  if dpdk_ovs_env == true
     config.vm.provision "file", source: "systemctl/ovs-vswitchd.service", destination: "/tmp/ovs-vswitchd.service"
     config.vm.provision "file", source: "systemctl/ovsdb-server.service", destination: "/tmp/ovsdb-server.service"
     config.vm.provision "shell", privileged: false, inline: $ovs_dpdk
  else
     config.vm.provision "shell", privileged: false, inline: $apt_openvswitch
  end

  if development_env == true
    config.vm.provision "file", source: "configs/.vimrc", destination: "$HOME/.vimrc"
    config.vm.provision "shell", privileged: false, inline: $vortex_env
    config.vm.provision "shell", privileged: false, inline: $vortex_dev_toolkits
  else
    config.vm.provision "shell", privileged: false, inline: $vortex_env
  end

  config.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 4096]
      v.customize ['modifyvm', :id, '--nicpromisc1', 'allow-all']
  end
end
